{"version":3,"file":"index.umd.js","sources":["../src/config.js","../src/imports.js","../src/file.js","../src/address.js","../src/crypto.js","../src/interaction.js","../src/generated/contracts/FlowManager.js","../src/generated/scripts/checkManager.js","../src/generated/scripts/getAccountAddress.js","../src/generated/scripts/getBalance.js","../src/generated/scripts/getContractAddress.js","../src/generated/transactions/createAccount.js","../src/generated/transactions/deployContract.js","../src/generated/transactions/initManager.js","../src/generated/transactions/mintTokens.js","../src/generated/transactions/registerContract.js","../src/generated/transactions/scratch.js","../src/generated/transactions/updateContract.js","../src/generated/transactions/index.js","../src/generated/index.js","../src/templates.js","../src/manager.js","../src/account.js","../src/deploy-code.js","../src/jest-asserts.js","../src/emulator.js","../src/contract.js","../src/flow-token.js","../src/init.js"],"sourcesContent":["/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { flowConfig } from \"@onflow/fcl-config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Get value from provided scope and path.\n * @param scope - scope value.\n * @param path - value path in config (flow.json) file.\n * @param fallback - fallback value.\n * @returns {*} - value at specified scope and path.\n */\nexport const get = (scope, path, fallback) => {\n  if (typeof path === \"string\") return get(scope, path.split(\"/\"), fallback);\n  if (!path.length) return scope;\n  try {\n    const [head, ...rest] = path;\n    return get(scope[head], rest, fallback);\n  } catch (_error) {\n    return fallback;\n  }\n};\n\n/**\n * Set globally available config value.\n * @param {string} key - key to be used to access stored value.\n * @param {string} env - value key in the environment (for example .env file).\n * @param {string} conf - value path in config (flow.json) file.\n * @param fallback - fallback value to be used if env and conf are absent.\n */\nexport const set = (key, env, conf, fallback) => {\n  config().put(key, env || get(flowConfig(), conf, fallback));\n};\n\n/**\n * Returns config value at specified key.\n * @param key - key to the value.\n * @returns {Promise<*>} - value at specified key.\n */\nexport const getConfigValue = async (key) => {\n  return config().get(key);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst REGEXP_IMPORT = /(\\s*import\\s*)([\\w\\d]+)(\\s+from\\s*)([\\w\\d\".\\\\/]+)/g;\n\nconst getPairs = (line) => {\n  return line\n    .split(/\\s/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item.length > 0 && item !== \"import\" && item !== \"from\");\n};\n\nconst collect = (acc, item) => {\n  const [contract, address] = item;\n  acc[contract] = address;\n  return acc;\n};\n\n/**\n * Returns address map for contracts defined in template code.\n * @param {string} code - Cadence code to parse.\n * @returns {*}\n */\nexport const extractImports = (code) => {\n  if (!code || code.length === 0) {\n    return {};\n  }\n  return code\n    .split(\"\\n\")\n    .filter((line) => line.includes(\"import\"))\n    .map(getPairs)\n    .reduce(collect, {});\n};\n\nexport const replaceImports = (code, addressMap) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract) => {\n    const newAddress = addressMap instanceof Function ? addressMap(contract) : addressMap[contract];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Returns Cadence template code with replaced import addresses\n * @param {string} code - Cadence template code.\n * @param {{string:string}} [addressMap={}] - name/address map or function to use as lookup table\n * for addresses in import statements.\n * @param byName - lag to indicate whether we shall use names of the contracts.\n * @returns {*}\n */\nexport const replaceImportAddresses = (code, addressMap, byName = true) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract, _, address) => {\n    const key = byName ? contract : address;\n    const newAddress = addressMap instanceof Function ? addressMap(key) : addressMap[key];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport { config } from \"@onflow/config\";\n\nimport { replaceImportAddresses } from \"./imports\";\n\nexport const readFile = (path) => {\n  return fs.readFileSync(path, \"utf8\");\n};\n\n/**\n * Address map with access by name for contracts deployed to emulator by default.\n * @type {{FlowFees: string, FlowToken: string, FungibleToken: string}}\n */\nexport const defaultsByName = {\n  FlowToken: \"0x0ae53cb6e3f42a79\",\n  FungibleToken: \"0xee82856bf20e2aa6\",\n  FlowFees: \"0xe5a8b7f23e8b548f\",\n  FlowStorageFees: \"0xf8d6e0586b0a20c7\",\n};\n\n/**\n * Address map with access by address for contracts deployed to emulator by default.\n * @type {{\"0xe5a8b7f23e8b548f\": string, \"0xf8d6e0586b0a20c7\": string, \"0xee82856bf20e2aa6\": string, \"0x0ae53cb6e3f42a79\": string}}\n */\nexport const defaultsByAddress = {\n  \"0xe5a8b7f23e8b548f\": \"0xe5a8b7f23e8b548f\", // FlowFees\n  \"0xf8d6e0586b0a20c7\": \"0xf8d6e0586b0a20c7\", // FlowStorageFees\n  \"0x0ae53cb6e3f42a79\": \"0x0ae53cb6e3f42a79\", // FlowToken\n  \"0xee82856bf20e2aa6\": \"0xee82856bf20e2aa6\", // FungibleToken\n};\n\nconst SCRIPT = \"./scripts/\";\nconst TRANSACTION = \"./transactions/\";\nconst CONTRACT = \"./contracts/\";\n\nexport const templateType = {\n  SCRIPT,\n  TRANSACTION,\n  CONTRACT,\n};\n\nexport const getPath = async (name, type = TRANSACTION) => {\n  const configBase = await config().get(\"BASE_PATH\");\n  return path.resolve(configBase, `${type}/${name}.cdc`);\n};\n\n/**\n * Returns Cadence template for specified file. Replaces imports using provided address map\n * @param file - name of the file to look for.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [byAddress=false] - flag to indicate if address map is address to address type.\n * @returns {string}\n */\nexport const getTemplate = (file, addressMap = {}, byAddress = false) => {\n  const rawCode = readFile(file);\n\n  const defaults = byAddress ? defaultsByAddress : defaultsByName;\n\n  return addressMap\n    ? replaceImportAddresses(rawCode, {\n        ...defaults,\n        ...addressMap,\n      })\n    : rawCode;\n};\n\n/**\n * Returns contract template using name of the file in \"contracts\" folder containing the code.\n * @param name - name of the contract template in \"contract\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getContractCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.CONTRACT);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns transaction template using name of the file in \"transactions\" folder containing the code.\n * @param name - name of the transaction template in \"transactions\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getTransactionCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.TRANSACTION);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns script template using name of the file in \"scripts\" folder containing the code.\n * @param name - name of the script template in \"scripts\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getScriptCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.SCRIPT);\n  return getTemplate(path, addressMap);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const sansPrefix = (address) => {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\");\n};\n\nexport const withPrefix = (address) => {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ec as EC } from \"elliptic\";\nimport { SHA3 } from \"sha3\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as rlp from \"rlp\";\nimport { config } from \"@onflow/config\";\nimport { sansPrefix, withPrefix } from \"./address\";\nconst ec = new EC(\"p256\");\n\nconst hashMsgHex = (msgHex) => {\n  const sha = new SHA3(256);\n  sha.update(Buffer.from(msgHex, \"hex\"));\n  return sha.digest();\n};\n\nexport const signWithKey = (privateKey, msgHex) => {\n  const key = ec.keyFromPrivate(Buffer.from(privateKey, \"hex\"));\n  const sig = key.sign(hashMsgHex(msgHex));\n  const n = 32; // half of signature length?\n  const r = sig.r.toArrayLike(Buffer, \"be\", n);\n  const s = sig.s.toArrayLike(Buffer, \"be\", n);\n  return Buffer.concat([r, s]).toString(\"hex\");\n};\n\nexport const authorization =\n  (addr, keyId = 0) =>\n  async (account = {}) => {\n    const serviceAddress = await config().get(\"SERVICE_ADDRESS\");\n    const pkey = await config().get(\"PRIVATE_KEY\");\n\n    addr = sansPrefix(addr || serviceAddress);\n\n    const signingFunction = async (data) => ({\n      keyId,\n      addr: withPrefix(addr),\n      signature: signWithKey(pkey, data.message),\n    });\n\n    return {\n      ...account,\n      tempId: `${addr}-${keyId}`,\n      addr: fcl.sansPrefix(addr),\n      keyId,\n      signingFunction,\n    };\n  };\n\nexport const pubFlowKey = async () => {\n  const keys = ec.keyFromPrivate(Buffer.from(await config().get(\"PRIVATE_KEY\"), \"hex\"));\n  const publicKey = keys.getPublic(\"hex\").replace(/^04/, \"\");\n  return rlp\n    .encode([\n      Buffer.from(publicKey, \"hex\"), // publicKey hex to binary\n      2, // P256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      3, // SHA3-256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      1000, // give key full weight\n    ])\n    .toString(\"hex\");\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as fcl from \"@onflow/fcl\";\nimport { authorization } from \"./crypto\";\nimport { getTransactionCode, getScriptCode } from \"./file\";\n\nexport const unwrap = (arr, convert) => {\n  const type = arr[arr.length - 1];\n  return arr.slice(0, -1).map((value) => convert(value, type));\n};\n\nconst mapArgs = (args) => {\n  return args.reduce((acc, arg) => {\n    const unwrapped = unwrap(arg, (value, type) => {\n      return fcl.arg(value, type);\n    });\n    acc = [...acc, ...unwrapped];\n    return acc;\n  }, []);\n};\n\nconst isObject = (arg) => typeof arg === \"object\" && arg !== null;\n\nconst extractParameters = (ixType) => {\n  return async (params) => {\n    let ixCode, ixName, ixSigners, ixArgs, ixAddressMap;\n\n    if (isObject(params[0])) {\n      const [props] = params;\n      const { name, addressMap } = props;\n      const { code, args, signers } = props;\n\n      if (!name && !code) {\n        throw Error(\"Both `name` and `code` are missing. Provide either of them\");\n      }\n      // get name and addressMap\n      ixName = name;\n      ixAddressMap = addressMap || {};\n      // or code\n      ixCode = code;\n\n      ixSigners = signers;\n      ixArgs = args;\n    } else {\n      const [name, addressMap, signers] = params;\n      ixName = name;\n      ixSigners = signers;\n      ixAddressMap = addressMap || {};\n    }\n\n    if (ixName) {\n      const getIxTemplate = ixType === \"script\" ? getScriptCode : getTransactionCode;\n      ixCode = await getIxTemplate({\n        name: ixName,\n        addressMap: ixAddressMap,\n      });\n    }\n\n    return {\n      code: ixCode,\n      signers: ixSigners,\n      args: ixArgs,\n    };\n  };\n};\n\n/**\n * Submits transaction to emulator network and waits before it will be sealed.\n * Returns transaction result.\n * @param {string} [props.name] - Name of Cadence template file\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {string} [props.code] - Cadence code of the transaction.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @param {[string]} [props.signers] - list of signers, who will authorize transaction, specified as array of addresses.\n * @returns {Promise<any>}\n */\nexport const sendTransaction = async (...props) => {\n  const extractor = extractParameters(\"tx\");\n  const { code, args, signers } = await extractor(props);\n\n  const serviceAuth = authorization();\n\n  // set repeating transaction code\n  const ix = [\n    fcl.transaction(code),\n    fcl.payer(serviceAuth),\n    fcl.proposer(serviceAuth),\n    fcl.limit(999),\n  ];\n\n  // use signers if specified\n  if (signers) {\n    const auths = signers.map((address) => authorization(address));\n    ix.push(fcl.authorizations(auths));\n  } else {\n    // and only service account if no signers\n    ix.push(fcl.authorizations([serviceAuth]));\n  }\n\n  // add arguments if any\n  if (args) {\n    ix.push(fcl.args(mapArgs(args)));\n  }\n  const response = await fcl.send(ix);\n  return await fcl.tx(response).onceExecuted();\n};\n\n/**\n * Sends script code for execution. Returns decoded value\n * @param {string} props.code - Cadence code of the script to be submitted.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @returns {Promise<*>}\n */\nexport const executeScript = async (...props) => {\n  const extractor = extractParameters(\"script\");\n  const { code, args } = await extractor(props);\n\n  const ix = [fcl.script(code)];\n  // add arguments if any\n  if (args) {\n    ix.push(fcl.args(mapArgs(args)));\n  }\n  const response = await fcl.send(ix);\n  return fcl.decode(response);\n};\n","import { deployContract } from \"../../\";\n\nimport { getEnvironment, replaceImportAddresses, reportMissingImports } from \"flow-cadut\";\n\nexport const CODE = `\n  pub contract FlowManager {\n\n    pub event AccountAdded(address: Address)\n\n    pub struct Mapper {\n        pub let accounts: {String: Address}\n\n        pub fun getAddress(_ name: String): Address? {\n            return self.accounts[name]\n        }\n\n        pub fun setAddress(_ name: String, address: Address){\n            self.accounts[name] = address\n            emit FlowManager.AccountAdded(address: address)\n        }\n\n        init(){\n            self.accounts = {}\n        }\n    }\n\n    pub let accountManagerStorage: StoragePath\n    pub let contractManagerStorage: StoragePath\n    pub let accountManagerPath: PublicPath\n    pub let contractManagerPath: PublicPath\n\n    init(){\n        let accountManager = Mapper()\n        let contractManager = Mapper()\n\n        self.accountManagerStorage = /storage/testSuitAccountManager\n        self.contractManagerStorage = /storage/testSuitContractManager\n\n        self.accountManagerPath = /public/testSuitAccountManager\n        self.contractManagerPath = /public/testSuitContractManager\n        \n        // Destroy previously stored values\n        self.account.load<Mapper>(from: self.accountManagerStorage)\n        self.account.load<Mapper>(from: self.contractManagerStorage)\n\n        self.account.save(accountManager, to: self.accountManagerStorage)\n        self.account.save(contractManager, to: self.contractManagerStorage)\n\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\n    }\n}\n \n`;\n\n/**\n * Method to generate Cadence code for FlowManager transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const FlowManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `FlowManager =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Deploys FlowManager transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * param Array<string> - list of signers\n */\nexport const FlowManager = async ({ addressMap = {}, args = [], to, update = false }) => {\n  const code = await FlowManagerTemplate(addressMap);\n  const name = \"FlowManager\";\n\n  return deployContract({ code, args, to, update, name });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty. The script will throw error if FlowManager is not\n    // added to service address\n}\n\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const checkManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `checkManager =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const checkManager = async ({ addressMap = {}, args = [] }) => {\n  const code = await checkManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, checkManager);\n\n  return executeScript({ code, args });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.accountManagerPath\n    let accountManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return accountManager.getAddress(name)\n\n}\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const getAccountAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getAccountAddress =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getAccountAddress = async ({ addressMap = {}, args = [] }) => {\n  const code = await getAccountAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, getAccountAddress);\n\n  return executeScript({ code, args });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  // This script reads the balance field of an account's FlowToken Balance\n\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\npub fun main(account: Address): UFix64 {\n    let acct = getAccount(account)\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\n        ?? panic(\"Could not borrow Balance reference to the Vault\")\n\n    return vaultRef.balance\n}\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const getBalanceTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getBalance =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getBalance = async ({ addressMap = {}, args = [] }) => {\n  const code = await getBalanceTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, getBalance);\n\n  return executeScript({ code, args });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.contractManagerPath\n    let contractManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return contractManager.getAddress(name)\n\n}\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const getContractAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getContractAddress =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getContractAddress = async ({ addressMap = {}, args = [] }) => {\n  const code = await getContractAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, getContractAddress);\n\n  return executeScript({ code, args });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction (_ name: String, pubKey: String, manager: Address) {\n    prepare( admin: AuthAccount) {\n        let newAccount = AuthAccount(payer:admin)\n        newAccount.addPublicKey(pubKey.decodeHex())\n\n        let linkPath = FlowManager.accountManagerPath\n        let accountManager = getAccount(manager)\n                            .getCapability(linkPath)!\n                            .borrow<&FlowManager.Mapper>()!\n        \n        // Create a record in account database\n        let address = newAccount.address\n        accountManager.setAddress(name, address: address)\n    }\n}\n \n`;\n\n/**\n * Method to generate cadence code for createAccount transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const createAccountTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `createAccount =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends createAccount transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const createAccount = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await createAccountTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, createAccount);\n  reportMissing(\"signers\", signers.length, 1, createAccount);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n`;\n\n/**\n * Method to generate cadence code for deployContract transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const deployContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `deployContract =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends deployContract transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const deployContract = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await deployContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, deployContract);\n  reportMissing(\"signers\", signers.length, 1, deployContract);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: \"FlowManager\",\n           code: code.decodeHex(),\n        )\n   }\n}\n\n`;\n\n/**\n * Method to generate cadence code for initManager transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const initManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `initManager =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends initManager transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const initManager = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await initManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, initManager);\n  reportMissing(\"signers\", signers.length, 1, initManager);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic(\"Signer is not the token admin\")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic(\"Unable to borrow receiver reference\")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n`;\n\n/**\n * Method to generate cadence code for mintTokens transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const mintTokensTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `mintTokens =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends mintTokens transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const mintTokens = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await mintTokensTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, mintTokens);\n  reportMissing(\"signers\", signers.length, 1, mintTokens);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name: String, address: Address) {\n    prepare(signer: AuthAccount){\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = signer\n                                .getCapability(linkPath)!\n                                .borrow<&FlowManager.Mapper>()!\n        contractManager.setAddress(name, address: address)\n    }\n}\n`;\n\n/**\n * Method to generate cadence code for registerContract transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const registerContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `registerContract =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends registerContract transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const registerContract = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await registerContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, registerContract);\n  reportMissing(\"signers\", signers.length, 1, registerContract);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  transaction{\n    prepare(acct: AuthAccount){\n        log(acct.address)\n    }\n}\n`;\n\n/**\n * Method to generate cadence code for scratch transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const scratchTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `scratch =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends scratch transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const scratch = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await scratchTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, scratch);\n  reportMissing(\"signers\", signers.length, 1, scratch);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n`;\n\n/**\n * Method to generate cadence code for updateContract transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const updateContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `updateContract =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends updateContract transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const updateContract = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await updateContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, updateContract);\n  reportMissing(\"signers\", signers.length, 1, updateContract);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { createAccountTemplate, createAccount } from \"./createAccount\";\nimport { deployContractTemplate, deployContract } from \"./deployContract\";\nimport { initManagerTemplate, initManager } from \"./initManager\";\nimport { mintTokensTemplate, mintTokens } from \"./mintTokens\";\nimport { registerContractTemplate, registerContract } from \"./registerContract\";\nimport { scratchTemplate, scratch } from \"./scratch\";\nimport { updateContractTemplate, updateContract } from \"./updateContract\";\n\nexport default {\n  createAccount,\n  createAccountTemplate,\n  deployContract,\n  deployContractTemplate,\n  initManager,\n  initManagerTemplate,\n  mintTokens,\n  mintTokensTemplate,\n  registerContract,\n  registerContractTemplate,\n  scratch,\n  scratchTemplate,\n  updateContract,\n  updateContractTemplate,\n};\n","import contracts from \"./contracts\";\nimport scripts from \"./scripts\";\nimport transactions from \"./transactions\";\n\nexport default {\n  contracts,\n  scripts,\n  transactions,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport registry from \"./generated\";\nimport { defaultsByName } from \"./file\";\n\nconst FlowTokenMap = { ExampleToken: defaultsByName.FlowToken };\n\nconst lowerFirst = (name) => {\n  return name[0].toLowerCase() + name.slice(1);\n};\n\nexport const makeMintTransaction = async (name) => {\n  const code = await registry.transactions.mintTokensTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n\nexport const makeGetBalance = async (name) => {\n  const code = await registry.scripts.getBalanceTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { config } from \"@onflow/config\";\nimport { withPrefix } from \"./address\";\nimport { hexContract } from \"./deploy-code\";\nimport registry from \"./generated\";\n\nexport const initManager = async () => {\n  const code = await registry.transactions.initManagerTemplate();\n  const contractCode = await registry.contracts.FlowManagerTemplate();\n  const hexedContract = hexContract(contractCode);\n  const args = [[hexedContract, t.String]];\n\n  await sendTransaction({\n    code,\n    args,\n  });\n};\n\nexport const getServiceAddress = async () => {\n  return withPrefix(await config().get(\"SERVICE_ADDRESS\"));\n};\n\nexport const getManagerAddress = async () => {\n  const serviceAddress = await getServiceAddress();\n\n  const addressMap = {\n    FlowManager: serviceAddress,\n  };\n\n  const code = await registry.scripts.checkManagerTemplate(addressMap);\n\n  try {\n    await executeScript({\n      code,\n    });\n  } catch (e) {\n    await initManager();\n  }\n\n  return getServiceAddress();\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\n\nimport { pubFlowKey } from \"./crypto\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { getManagerAddress } from \"./manager\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of account specified by name. If account with that name doesn't exist it will be created\n * and assigned provided name as alias\n * @param {string} accountName - name of the account\n * @returns {Promise<string|*>}\n */\nexport const getAccountAddress = async (accountName) => {\n  const name = accountName || `deployment-account-${(Math.random() * Math.pow(10, 8)).toFixed(0)}`;\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let accountAddress;\n  try {\n    const code = await registry.scripts.getAccountAddressTemplate(addressMap);\n\n    const args = [\n      [name, t.String],\n      [managerAddress, t.Address],\n    ];\n    accountAddress = await executeScript({\n      code,\n      args,\n    });\n  } catch (e) {\n    console.error(\"failed to get account address:\", e);\n  }\n\n  if (accountAddress === null) {\n    try {\n      const code = await registry.transactions.createAccountTemplate(addressMap);\n      const publicKey = await pubFlowKey();\n      const args = [\n        [name, publicKey, t.String],\n        [managerAddress, t.Address],\n      ];\n      const { events } = await sendTransaction({\n        code,\n        args,\n      });\n      const event = events.find((event) => event.type.includes(\"AccountAdded\"));\n      accountAddress = event.data.address;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  return accountAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { unwrap, sendTransaction } from \"./interaction\";\nimport { getServiceAddress } from \"./manager\";\nimport { getContractCode } from \"./file\";\nimport { getAccountAddress } from \"./account\";\n\nimport txRegistry from \"./generated/transactions\";\nconst { updateContractTemplate, deployContractTemplate } = txRegistry;\n\nexport const hexContract = (contract) => Buffer.from(contract, \"utf8\").toString(\"hex\");\n\n/**\n * Deploys a contract by name to specified account\n * Returns transaction result.\n * @param {string} props.to - If no address is supplied, the contract will be deployed to the emulator service account.\n * @param {string} props.name  - The name of the contract to look for. This should match a .cdc file located at the specified `basePath`.\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced.\n * @returns {Promise<any>}\n */\nexport const deployContractByName = async (props) => {\n  const { to, name, addressMap, args, update = false } = props;\n\n  const resolvedAddress = to || (await getAccountAddress());\n  const contractCode = await getContractCode({ name, addressMap });\n\n  return deployContract({\n    to: resolvedAddress,\n    code: contractCode,\n    name,\n    args,\n    update,\n  });\n};\n\n/**\n * Deploys contract as Cadence code to specified account\n * Returns transaction result.\n * @param {string} props.code - Cadence code for contract to be deployed\n * @param {string} props.to - If no address is supplied, the contract\n * will be deployed to the emulator service account\n * @param {string} props.name  - The name of the contract to look for. This should match\n * a .cdc file located at the specified `basePath`\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced\n */\nexport const deployContract = async (props) => {\n  const { to, code: contractCode, name, args, update } = props;\n\n  // TODO: extract name from contract code\n  const containerAddress = to || (await getAccountAddress());\n  const managerAddress = await getServiceAddress();\n  const hexedCode = hexContract(contractCode);\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let code = update\n    ? await updateContractTemplate(addressMap)\n    : await deployContractTemplate(addressMap);\n\n  let deployArgs = [\n    [name, hexedCode, t.String],\n    [managerAddress, t.Address],\n  ];\n\n  // We don't really care about the names of the arguments, but we need unique one for each one of them\n  const argLetter = \"abcdefghijklmnopqrstuvwxyz\";\n  if (args) {\n    deployArgs = deployArgs.concat(args);\n\n    let i = 0;\n    const argsList = [];\n    const argsWithTypes = args.reduce((acc, arg) => {\n      const unwrapped = unwrap(arg, (value, type) => {\n        const argName = argLetter[i];\n        i += 1;\n        argsList.push(argName);\n        return `${argName}:${type.label}`;\n      });\n      acc = [...acc, ...unwrapped];\n      return acc;\n    }, []);\n\n    code = code.replace(\"##ARGS-WITH-TYPES##\", `, ${argsWithTypes}`);\n    code = code.replace(\"##ARGS-LIST##\", argsList);\n  } else {\n    code = code.replace(\"##ARGS-WITH-TYPES##\", ``);\n    code = code.replace(\"##ARGS-LIST##\", \"\");\n  }\n\n  const signers = [containerAddress];\n\n  return sendTransaction({\n    code,\n    args: deployArgs,\n    signers,\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { expect } = global;\n\n/**\n * Return Promise from passed interaction\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*>\n * */\nexport const promise = async (ix) => {\n  if (typeof ix === \"function\") {\n    return await ix();\n  }\n  return await ix;\n};\n\n/**\n * Ensure transaction did not throw and sealed.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - transaction result\n * */\nexport const shallPass = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).resolves.not.toBe(null);\n  await expect(wrappedInteraction).resolves.not.toThrow();\n\n  wrappedInteraction.then(({ status, errorMessage }) => {\n    expect(status).toBe(4);\n    expect(errorMessage).toBe(\"\");\n  });\n\n  return wrappedInteraction;\n};\n\n/**\n * Ensure interaction did not throw and return result of it\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - result of interaction\n * */\nexport const shallResolve = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).resolves.not.toThrow();\n\n  return wrappedInteraction;\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallRevert = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).rejects.not.toBe(null);\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallThrow = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).rejects.not.toBe(null);\n  await expect(wrappedInteraction).rejects.toThrow();\n};","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { spawn } = require(\"child_process\");\n\nconst DEFAULT_HTTP_PORT = 8080;\nconst DEFAULT_GRPC_PORT = 3569;\n\n/** Class representing emulator */\nclass Emulator {\n  /**\n   * Create an emulator.\n   */\n  constructor() {\n    this.initialized = false;\n    this.logging = true;\n  }\n\n  /**\n   * Set logging flag.\n   * @param {boolean} logging - whether logs shall be printed\n   */\n  setLogging(logging) {\n    this.logging = logging;\n  }\n\n  /**\n   * Log message with a specific type.\n   * @param {*} message - message to put into log output\n   * @param {\"log\"|\"error\"} type - type of the message to output\n   */\n  log(message, type = \"log\") {\n    this.logging && console[type](message);\n  }\n\n  /**\n   * Start emulator.\n   * @param {number} port - port to use for accessApi\n   * @param {boolean} logging - whether logs shall be printed\n   * @returns Promise<*>\n   */\n  async start(port = DEFAULT_HTTP_PORT, logging = false) {\n    const offset = port - DEFAULT_HTTP_PORT;\n    let grpc = DEFAULT_GRPC_PORT + offset;\n\n    this.logging = logging;\n    this.process = spawn(\"flow\", [\"emulator\", \"-v\", \"--http-port\", port, \"--port\", grpc]);\n\n    return new Promise((resolve, reject) => {\n      this.process.stdout.on(\"data\", (data) => {\n        this.log(`LOG: ${data}`);\n        if (data.includes(\"Starting HTTP server\")) {\n          this.log(\"EMULATOR IS UP! Listening for events!\");\n          this.initialized = true;\n          resolve(true);\n        }\n      });\n\n      this.process.stderr.on(\"data\", (data) => {\n        this.log(`stderr: ${data}`, \"error\");\n        this.initialized = false;\n        reject();\n      });\n\n      this.process.on(\"close\", (code) => {\n        this.log(`emulator exited with code ${code}`);\n        this.initialized = false;\n        resolve(true)\n      });\n    });\n  }\n\n  /**\n   * Stop emulator.\n   * @returns Promise<*>\n   */\n  async stop() {\n    // eslint-disable-next-line no-undef\n    return new Promise((resolve) => {\n      this.process.kill();\n      setTimeout(() => {\n        this.initialized = false;\n        resolve(true);\n      }, 0);\n    });\n  }\n}\n\n/** Singleton instance */\nexport default new Emulator();\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { getManagerAddress } from \"./manager\";\nimport { executeScript } from \"./interaction\";\nimport { defaultsByName } from \"./file\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of the account where contract specified by name is currently deployed\n * @param {string} name - name of the account to look for\n * @param {boolean} [useDefaults=false] - whether we shall look into default addressed first\n * @returns {Promise<string>}\n */\nexport const getContractAddress = async (name, useDefaults = false) => {\n  // TODO: Maybe try to automatically deploy contract? 🤔\n\n  if (useDefaults) {\n    const defaultContract = defaultsByName[name];\n    if (defaultContract !== undefined) {\n      return defaultContract;\n    }\n  }\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let contractAddress;\n  try {\n    const code = await registry.scripts.getContractAddressTemplate(addressMap);\n    const args = [\n      [name, t.String],\n      [managerAddress, t.Address],\n    ];\n    contractAddress = await executeScript({\n      code,\n      args,\n    });\n  } catch (e) {\n    console.error(\"failed to get account address:\", e);\n  }\n\n  return contractAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from \"@onflow/types\";\nimport { defaultsByName } from \"./file\";\nimport { replaceImportAddresses } from \"./imports\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { makeGetBalance, makeMintTransaction } from \"./templates\";\n\n/**\n * Returns current FlowToken balance of account specified by address\n * @param {string} address - address of account to check\n * @returns {Promise<*>}\n */\nexport const getFlowBalance = async (address) => {\n  const raw = await makeGetBalance(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [[address, types.Address]];\n\n  return executeScript({ code, args });\n};\n\n/**\n * Sends transaction to mint specified amount of FlowToken and send it to recipient.\n * Returns result of the transaction.\n * @param {string} recipient - address of recipient account\n * @param {string} amount - amount to mint and send\n * @returns {Promise<*>}\n */\nexport const mintFlow = async (recipient, amount) => {\n  const raw = await makeMintTransaction(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [\n    [recipient, types.Address],\n    [amount, types.UFix64],\n  ];\n\n  return sendTransaction({ code, args });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { set } from \"./config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Inits framework variables, storing private key of service account and base path\n * where Cadence files are stored.\n * @param {string} basePath - path to the folder with Cadence files to be tested.\n * @param {number} port - port to use for accessAPI\n */\nexport const init = async (basePath, port = 8080) => {\n  set(\"PRIVATE_KEY\", process.env.PK, \"accounts/emulator-account/keys\");\n  set(\n    \"SERVICE_ADDRESS\",\n    process.env.SERVICE_ADDRESS,\n    \"accounts/emulator-account/address\",\n    \"f8d6e0586b0a20c7\",\n  );\n\n  config().put(\"accessNode.api\", `http://localhost:${port}`);\n\n  set(\"BASE_PATH\", process.env.BASE_PATH, \"resolve/basePath\", basePath);\n};\n"],"names":["get","scope","path","fallback","split","length","head","rest","_error","set","key","env","conf","config","put","flowConfig","REGEXP_IMPORT","getPairs","line","map","item","replace","filter","collect","acc","replaceImportAddresses","code","addressMap","byName","match","imp","contract","_","address","Function","defaultsByName","FlowToken","FungibleToken","FlowFees","FlowStorageFees","defaultsByAddress","0xe5a8b7f23e8b548f","0xf8d6e0586b0a20c7","0x0ae53cb6e3f42a79","0xee82856bf20e2aa6","getPath","name","type","configBase","resolve","getTemplate","file","byAddress","rawCode","fs","readFileSync","readFile","getContractCode","getTransactionCode","TRANSACTION","getScriptCode","sansPrefix","withPrefix","ec","EC","authorization","addr","keyId","account","serviceAddress","pkey","tempId","fcl","signingFunction","data","signature","privateKey","msgHex","message","sig","keyFromPrivate","Buffer","from","sign","sha","SHA3","update","digest","hashMsgHex","r","toArrayLike","s","concat","toString","unwrap","arr","convert","slice","value","mapArgs","args","reduce","arg","unwrapped","extractParameters","ixType","params","ixCode","ixName","ixSigners","ixArgs","ixAddressMap","signers","props","Error","sendTransaction","extractor","serviceAuth","ix","transaction","payer","proposer","limit","auths","push","authorizations","send","response","tx","onceExecuted","executeScript","script","decode","CODE","createAccountTemplate","getEnvironment","envMap","fullMap","reportMissingImports","deployContractTemplate","initManagerTemplate","mintTokensTemplate","registerContractTemplate","scratchTemplate","updateContractTemplate","createAccount","reportMissing","deployContract","initManager","mintTokens","registerContract","scratch","updateContract","transactions","FlowTokenMap","ExampleToken","lowerFirst","toLowerCase","getServiceAddress","getManagerAddress","registry","FlowManager","body","recover","result","e","then","contractCode","hexedContract","hexContract","t","String","getAccountAddress","accountName","Math","random","pow","toFixed","managerAddress","accountAddress","_Buffer2","publicKey","getPublic","rlp","encode","pubFlowKey","Address","event","events","find","includes","console","error","txRegistry","containerAddress","hexedCode","deployArgs","i","argsList","argsWithTypes","argName","label","to","expect","global","promise","spawn","require","this","initialized","logging","setLogging","log","start","port","grpc","_this2","process","Promise","reject","stdout","on","stderr","stop","_this4","kill","setTimeout","resolvedAddress","useDefaults","defaultContract","undefined","contractAddress","makeGetBalance","raw","types","basePath","PK","SERVICE_ADDRESS","BASE_PATH","recipient","amount","makeMintTransaction","UFix64","wrappedInteraction","resolves","not","toBe","toThrow","errorMessage","status","rejects"],"mappings":"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"}