{"version":3,"file":"index.modern.js","sources":["../src/config.js","../src/init.js","../src/imports.js","../src/file.js","../src/address.js","../src/crypto.js","../src/interaction.js","../src/generated/contracts/FlowManager.js","../src/generated/scripts/checkManager.js","../src/generated/scripts/getAccountAddress.js","../src/generated/scripts/getBalance.js","../src/generated/scripts/getContractAddress.js","../src/generated/transactions/createAccount.js","../src/generated/transactions/deployContract.js","../src/generated/transactions/initManager.js","../src/generated/transactions/mintTokens.js","../src/generated/transactions/registerContract.js","../src/generated/transactions/scratch.js","../src/generated/transactions/updateContract.js","../src/generated/transactions/index.js","../src/generated/index.js","../src/templates.js","../src/flow-token.js","../src/manager.js","../src/account.js","../src/deploy-code.js","../src/contract.js","../src/jest-asserts.js","../src/emulator.js"],"sourcesContent":["/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { flowConfig } from \"@onflow/fcl-config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Get value from provided scope and path.\n * @param scope - scope value.\n * @param path - value path in config (flow.json) file.\n * @param fallback - fallback value.\n * @returns {*} - value at specified scope and path.\n */\nexport const get = (scope, path, fallback) => {\n  if (typeof path === \"string\") return get(scope, path.split(\"/\"), fallback);\n  if (!path.length) return scope;\n  try {\n    const [head, ...rest] = path;\n    return get(scope[head], rest, fallback);\n  } catch (_error) {\n    return fallback;\n  }\n};\n\n/**\n * Set globally available config value.\n * @param {string} key - key to be used to access stored value.\n * @param {string} env - value key in the environment (for example .env file).\n * @param {string} conf - value path in config (flow.json) file.\n * @param fallback - fallback value to be used if env and conf are absent.\n */\nexport const set = (key, env, conf, fallback) => {\n  config().put(key, env || get(flowConfig(), conf, fallback));\n};\n\n/**\n * Returns config value at specified key.\n * @param key - key to the value.\n * @returns {Promise<*>} - value at specified key.\n */\nexport const getConfigValue = async (key) => {\n  return config().get(key);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { set } from \"./config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Inits framework variables, storing private key of service account and base path\n * where Cadence files are stored.\n * @param {string} basePath - path to the folder with Cadence files to be tested.\n * @param {number} port - port to use for accessAPI\n */\nexport const init = async (basePath, port = 8080) => {\n  set(\"PRIVATE_KEY\", process.env.PK, \"accounts/emulator-account/keys\");\n  set(\n    \"SERVICE_ADDRESS\",\n    process.env.SERVICE_ADDRESS,\n    \"accounts/emulator-account/address\",\n    \"f8d6e0586b0a20c7\",\n  );\n\n  config().put(\"accessNode.api\", `http://localhost:${port}`);\n\n  set(\"BASE_PATH\", process.env.BASE_PATH, \"resolve/basePath\", basePath);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst REGEXP_IMPORT = /(\\s*import\\s*)([\\w\\d]+)(\\s+from\\s*)([\\w\\d\".\\\\/]+)/g;\n\nconst getPairs = (line) => {\n  return line\n    .split(/\\s/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item.length > 0 && item !== \"import\" && item !== \"from\");\n};\n\nconst collect = (acc, item) => {\n  const [contract, address] = item;\n  acc[contract] = address;\n  return acc;\n};\n\n/**\n * Returns address map for contracts defined in template code.\n * @param {string} code - Cadence code to parse.\n * @returns {*}\n */\nexport const extractImports = (code) => {\n  if (!code || code.length === 0) {\n    return {};\n  }\n  return code\n    .split(\"\\n\")\n    .filter((line) => line.includes(\"import\"))\n    .map(getPairs)\n    .reduce(collect, {});\n};\n\nexport const replaceImports = (code, addressMap) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract) => {\n    const newAddress = addressMap instanceof Function ? addressMap(contract) : addressMap[contract];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Returns Cadence template code with replaced import addresses\n * @param {string} code - Cadence template code.\n * @param {{string:string}} [addressMap={}] - name/address map or function to use as lookup table\n * for addresses in import statements.\n * @param byName - lag to indicate whether we shall use names of the contracts.\n * @returns {*}\n */\nexport const replaceImportAddresses = (code, addressMap, byName = true) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract, _, address) => {\n    const key = byName ? contract : address;\n    const newAddress = addressMap instanceof Function ? addressMap(key) : addressMap[key];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport { config } from \"@onflow/config\";\n\nimport { replaceImportAddresses } from \"./imports\";\n\nexport const readFile = (path) => {\n  return fs.readFileSync(path, \"utf8\");\n};\n\n/**\n * Address map with access by name for contracts deployed to emulator by default.\n * @type {{FlowFees: string, FlowToken: string, FungibleToken: string}}\n */\nexport const defaultsByName = {\n  FlowToken: \"0x0ae53cb6e3f42a79\",\n  FungibleToken: \"0xee82856bf20e2aa6\",\n  FlowFees: \"0xe5a8b7f23e8b548f\",\n  FlowStorageFees: \"0xf8d6e0586b0a20c7\",\n};\n\n/**\n * Address map with access by address for contracts deployed to emulator by default.\n * @type {{\"0xe5a8b7f23e8b548f\": string, \"0xf8d6e0586b0a20c7\": string, \"0xee82856bf20e2aa6\": string, \"0x0ae53cb6e3f42a79\": string}}\n */\nexport const defaultsByAddress = {\n  \"0xe5a8b7f23e8b548f\": \"0xe5a8b7f23e8b548f\", // FlowFees\n  \"0xf8d6e0586b0a20c7\": \"0xf8d6e0586b0a20c7\", // FlowStorageFees\n  \"0x0ae53cb6e3f42a79\": \"0x0ae53cb6e3f42a79\", // FlowToken\n  \"0xee82856bf20e2aa6\": \"0xee82856bf20e2aa6\", // FungibleToken\n};\n\nconst SCRIPT = \"./scripts/\";\nconst TRANSACTION = \"./transactions/\";\nconst CONTRACT = \"./contracts/\";\n\nexport const templateType = {\n  SCRIPT,\n  TRANSACTION,\n  CONTRACT,\n};\n\nexport const getPath = async (name, type = TRANSACTION) => {\n  const configBase = await config().get(\"BASE_PATH\");\n  return path.resolve(configBase, `${type}/${name}.cdc`);\n};\n\n/**\n * Returns Cadence template for specified file. Replaces imports using provided address map\n * @param file - name of the file to look for.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [byAddress=false] - flag to indicate if address map is address to address type.\n * @returns {string}\n */\nexport const getTemplate = (file, addressMap = {}, byAddress = false) => {\n  const rawCode = readFile(file);\n\n  const defaults = byAddress ? defaultsByAddress : defaultsByName;\n\n  return addressMap\n    ? replaceImportAddresses(rawCode, {\n        ...defaults,\n        ...addressMap,\n      })\n    : rawCode;\n};\n\n/**\n * Returns contract template using name of the file in \"contracts\" folder containing the code.\n * @param name - name of the contract template in \"contract\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getContractCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.CONTRACT);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns transaction template using name of the file in \"transactions\" folder containing the code.\n * @param name - name of the transaction template in \"transactions\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getTransactionCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.TRANSACTION);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns script template using name of the file in \"scripts\" folder containing the code.\n * @param name - name of the script template in \"scripts\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getScriptCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.SCRIPT);\n  return getTemplate(path, addressMap);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const sansPrefix = (address) => {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\");\n};\n\nexport const withPrefix = (address) => {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ec as EC } from \"elliptic\";\nimport { SHA3 } from \"sha3\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as rlp from \"rlp\";\nimport { config } from \"@onflow/config\";\nimport { sansPrefix, withPrefix } from \"./address\";\nconst ec = new EC(\"p256\");\n\nconst hashMsgHex = (msgHex) => {\n  const sha = new SHA3(256);\n  sha.update(Buffer.from(msgHex, \"hex\"));\n  return sha.digest();\n};\n\nexport const signWithKey = (privateKey, msgHex) => {\n  const key = ec.keyFromPrivate(Buffer.from(privateKey, \"hex\"));\n  const sig = key.sign(hashMsgHex(msgHex));\n  const n = 32; // half of signature length?\n  const r = sig.r.toArrayLike(Buffer, \"be\", n);\n  const s = sig.s.toArrayLike(Buffer, \"be\", n);\n  return Buffer.concat([r, s]).toString(\"hex\");\n};\n\nexport const authorization =\n  (addr, keyId = 0) =>\n  async (account = {}) => {\n    const serviceAddress = await config().get(\"SERVICE_ADDRESS\");\n    const pkey = await config().get(\"PRIVATE_KEY\");\n\n    addr = sansPrefix(addr || serviceAddress);\n\n    const signingFunction = async (data) => ({\n      keyId,\n      addr: withPrefix(addr),\n      signature: signWithKey(pkey, data.message),\n    });\n\n    return {\n      ...account,\n      tempId: `${addr}-${keyId}`,\n      addr: fcl.sansPrefix(addr),\n      keyId,\n      signingFunction,\n    };\n  };\n\nexport const pubFlowKey = async () => {\n  const keys = ec.keyFromPrivate(Buffer.from(await config().get(\"PRIVATE_KEY\"), \"hex\"));\n  const publicKey = keys.getPublic(\"hex\").replace(/^04/, \"\");\n  return rlp\n    .encode([\n      Buffer.from(publicKey, \"hex\"), // publicKey hex to binary\n      2, // P256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      3, // SHA3-256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      1000, // give key full weight\n    ])\n    .toString(\"hex\");\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as fcl from \"@onflow/fcl\";\nimport { authorization } from \"./crypto\";\nimport { getTransactionCode, getScriptCode } from \"./file\";\n\nexport const unwrap = (arr, convert) => {\n  const type = arr[arr.length - 1];\n  return arr.slice(0, -1).map((value) => convert(value, type));\n};\n\nconst mapArgs = (args) => {\n  return args.reduce((acc, arg) => {\n    const unwrapped = unwrap(arg, (value, type) => {\n      return fcl.arg(value, type);\n    });\n    acc = [...acc, ...unwrapped];\n    return acc;\n  }, []);\n};\n\nconst isObject = (arg) => typeof arg === \"object\" && arg !== null;\n\nconst extractParameters = (ixType) => {\n  return async (params) => {\n    let ixCode, ixName, ixSigners, ixArgs, ixAddressMap;\n\n    if (isObject(params[0])) {\n      const [props] = params;\n      const { name, addressMap } = props;\n      const { code, args, signers } = props;\n\n      if (!name && !code) {\n        throw Error(\"Both `name` and `code` are missing. Provide either of them\");\n      }\n      // get name and addressMap\n      ixName = name;\n      ixAddressMap = addressMap || {};\n      // or code\n      ixCode = code;\n\n      ixSigners = signers;\n      ixArgs = args;\n    } else {\n      const [name, addressMap, signers] = params;\n      ixName = name;\n      ixSigners = signers;\n      ixAddressMap = addressMap || {};\n    }\n\n    if (ixName) {\n      const getIxTemplate = ixType === \"script\" ? getScriptCode : getTransactionCode;\n      ixCode = await getIxTemplate({\n        name: ixName,\n        addressMap: ixAddressMap,\n      });\n    }\n\n    return {\n      code: ixCode,\n      signers: ixSigners,\n      args: ixArgs,\n    };\n  };\n};\n\n/**\n * Submits transaction to emulator network and waits before it will be sealed.\n * Returns transaction result.\n * @param {string} [props.name] - Name of Cadence template file\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {string} [props.code] - Cadence code of the transaction.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @param {[string]} [props.signers] - list of signers, who will authorize transaction, specified as array of addresses.\n * @returns {Promise<any>}\n */\nexport const sendTransaction = async (...props) => {\n  const extractor = extractParameters(\"tx\");\n  const { code, args, signers } = await extractor(props);\n\n  const serviceAuth = authorization();\n\n  // set repeating transaction code\n  const ix = [\n    fcl.transaction(code),\n    fcl.payer(serviceAuth),\n    fcl.proposer(serviceAuth),\n    fcl.limit(999),\n  ];\n\n  // use signers if specified\n  if (signers) {\n    const auths = signers.map((address) => authorization(address));\n    ix.push(fcl.authorizations(auths));\n  } else {\n    // and only service account if no signers\n    ix.push(fcl.authorizations([serviceAuth]));\n  }\n\n  // add arguments if any\n  if (args) {\n    ix.push(fcl.args(mapArgs(args)));\n  }\n  const response = await fcl.send(ix);\n  return await fcl.tx(response).onceExecuted();\n};\n\n/**\n * Sends script code for execution. Returns decoded value\n * @param {string} props.code - Cadence code of the script to be submitted.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @returns {Promise<*>}\n */\nexport const executeScript = async (...props) => {\n  const extractor = extractParameters(\"script\");\n  const { code, args } = await extractor(props);\n\n  const ix = [fcl.script(code)];\n  // add arguments if any\n  if (args) {\n    ix.push(fcl.args(mapArgs(args)));\n  }\n  const response = await fcl.send(ix);\n  return fcl.decode(response);\n};\n","import { deployContract } from \"../../\";\n\nimport { getEnvironment, replaceImportAddresses, reportMissingImports } from \"flow-cadut\";\n\nexport const CODE = `\n  pub contract FlowManager {\n\n    pub event AccountAdded(address: Address)\n\n    pub struct Mapper {\n        pub let accounts: {String: Address}\n\n        pub fun getAddress(_ name: String): Address? {\n            return self.accounts[name]\n        }\n\n        pub fun setAddress(_ name: String, address: Address){\n            self.accounts[name] = address\n            emit FlowManager.AccountAdded(address: address)\n        }\n\n        init(){\n            self.accounts = {}\n        }\n    }\n\n    pub let accountManagerStorage: StoragePath\n    pub let contractManagerStorage: StoragePath\n    pub let accountManagerPath: PublicPath\n    pub let contractManagerPath: PublicPath\n\n    init(){\n        let accountManager = Mapper()\n        let contractManager = Mapper()\n\n        self.accountManagerStorage = /storage/testSuitAccountManager\n        self.contractManagerStorage = /storage/testSuitContractManager\n\n        self.accountManagerPath = /public/testSuitAccountManager\n        self.contractManagerPath = /public/testSuitContractManager\n        \n        // Destroy previously stored values\n        self.account.load<Mapper>(from: self.accountManagerStorage)\n        self.account.load<Mapper>(from: self.contractManagerStorage)\n\n        self.account.save(accountManager, to: self.accountManagerStorage)\n        self.account.save(contractManager, to: self.contractManagerStorage)\n\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\n    }\n}\n \n`;\n\n/**\n * Method to generate Cadence code for FlowManager transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const FlowManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `FlowManager =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Deploys FlowManager transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * param Array<string> - list of signers\n */\nexport const FlowManager = async ({ addressMap = {}, args = [], to, update = false }) => {\n  const code = await FlowManagerTemplate(addressMap);\n  const name = \"FlowManager\";\n\n  return deployContract({ code, args, to, update, name });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty. The script will throw error if FlowManager is not\n    // added to service address\n}\n\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const checkManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `checkManager =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const checkManager = async ({ addressMap = {}, args = [] }) => {\n  const code = await checkManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, checkManager);\n\n  return executeScript({ code, args });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.accountManagerPath\n    let accountManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return accountManager.getAddress(name)\n\n}\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const getAccountAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getAccountAddress =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getAccountAddress = async ({ addressMap = {}, args = [] }) => {\n  const code = await getAccountAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, getAccountAddress);\n\n  return executeScript({ code, args });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  // This script reads the balance field of an account's FlowToken Balance\n\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\npub fun main(account: Address): UFix64 {\n    let acct = getAccount(account)\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\n        ?? panic(\"Could not borrow Balance reference to the Vault\")\n\n    return vaultRef.balance\n}\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const getBalanceTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getBalance =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getBalance = async ({ addressMap = {}, args = [] }) => {\n  const code = await getBalanceTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, getBalance);\n\n  return executeScript({ code, args });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.contractManagerPath\n    let contractManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return contractManager.getAddress(name)\n\n}\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const getContractAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getContractAddress =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getContractAddress = async ({ addressMap = {}, args = [] }) => {\n  const code = await getContractAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, getContractAddress);\n\n  return executeScript({ code, args });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction (_ name: String, pubKey: String, manager: Address) {\n    prepare( admin: AuthAccount) {\n        let newAccount = AuthAccount(payer:admin)\n        newAccount.addPublicKey(pubKey.decodeHex())\n\n        let linkPath = FlowManager.accountManagerPath\n        let accountManager = getAccount(manager)\n                            .getCapability(linkPath)!\n                            .borrow<&FlowManager.Mapper>()!\n        \n        // Create a record in account database\n        let address = newAccount.address\n        accountManager.setAddress(name, address: address)\n    }\n}\n \n`;\n\n/**\n * Method to generate cadence code for createAccount transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const createAccountTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `createAccount =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends createAccount transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const createAccount = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await createAccountTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, createAccount);\n  reportMissing(\"signers\", signers.length, 1, createAccount);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n`;\n\n/**\n * Method to generate cadence code for deployContract transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const deployContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `deployContract =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends deployContract transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const deployContract = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await deployContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, deployContract);\n  reportMissing(\"signers\", signers.length, 1, deployContract);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: \"FlowManager\",\n           code: code.decodeHex(),\n        )\n   }\n}\n\n`;\n\n/**\n * Method to generate cadence code for initManager transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const initManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `initManager =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends initManager transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const initManager = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await initManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, initManager);\n  reportMissing(\"signers\", signers.length, 1, initManager);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic(\"Signer is not the token admin\")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic(\"Unable to borrow receiver reference\")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n`;\n\n/**\n * Method to generate cadence code for mintTokens transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const mintTokensTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `mintTokens =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends mintTokens transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const mintTokens = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await mintTokensTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, mintTokens);\n  reportMissing(\"signers\", signers.length, 1, mintTokens);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name: String, address: Address) {\n    prepare(signer: AuthAccount){\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = signer\n                                .getCapability(linkPath)!\n                                .borrow<&FlowManager.Mapper>()!\n        contractManager.setAddress(name, address: address)\n    }\n}\n`;\n\n/**\n * Method to generate cadence code for registerContract transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const registerContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `registerContract =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends registerContract transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const registerContract = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await registerContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, registerContract);\n  reportMissing(\"signers\", signers.length, 1, registerContract);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  transaction{\n    prepare(acct: AuthAccount){\n        log(acct.address)\n    }\n}\n`;\n\n/**\n * Method to generate cadence code for scratch transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const scratchTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `scratch =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends scratch transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const scratch = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await scratchTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, scratch);\n  reportMissing(\"signers\", signers.length, 1, scratch);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n`;\n\n/**\n * Method to generate cadence code for updateContract transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const updateContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `updateContract =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends updateContract transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const updateContract = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await updateContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, updateContract);\n  reportMissing(\"signers\", signers.length, 1, updateContract);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { createAccountTemplate, createAccount } from \"./createAccount\";\nimport { deployContractTemplate, deployContract } from \"./deployContract\";\nimport { initManagerTemplate, initManager } from \"./initManager\";\nimport { mintTokensTemplate, mintTokens } from \"./mintTokens\";\nimport { registerContractTemplate, registerContract } from \"./registerContract\";\nimport { scratchTemplate, scratch } from \"./scratch\";\nimport { updateContractTemplate, updateContract } from \"./updateContract\";\n\nexport default {\n  createAccount,\n  createAccountTemplate,\n  deployContract,\n  deployContractTemplate,\n  initManager,\n  initManagerTemplate,\n  mintTokens,\n  mintTokensTemplate,\n  registerContract,\n  registerContractTemplate,\n  scratch,\n  scratchTemplate,\n  updateContract,\n  updateContractTemplate,\n};\n","import contracts from \"./contracts\";\nimport scripts from \"./scripts\";\nimport transactions from \"./transactions\";\n\nexport default {\n  contracts,\n  scripts,\n  transactions,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport registry from \"./generated\";\nimport { defaultsByName } from \"./file\";\n\nconst FlowTokenMap = { ExampleToken: defaultsByName.FlowToken };\n\nconst lowerFirst = (name) => {\n  return name[0].toLowerCase() + name.slice(1);\n};\n\nexport const makeMintTransaction = async (name) => {\n  const code = await registry.transactions.mintTokensTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n\nexport const makeGetBalance = async (name) => {\n  const code = await registry.scripts.getBalanceTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from \"@onflow/types\";\nimport { defaultsByName } from \"./file\";\nimport { replaceImportAddresses } from \"./imports\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { makeGetBalance, makeMintTransaction } from \"./templates\";\n\n/**\n * Returns current FlowToken balance of account specified by address\n * @param {string} address - address of account to check\n * @returns {Promise<*>}\n */\nexport const getFlowBalance = async (address) => {\n  const raw = await makeGetBalance(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [[address, types.Address]];\n\n  return executeScript({ code, args });\n};\n\n/**\n * Sends transaction to mint specified amount of FlowToken and send it to recipient.\n * Returns result of the transaction.\n * @param {string} recipient - address of recipient account\n * @param {string} amount - amount to mint and send\n * @returns {Promise<*>}\n */\nexport const mintFlow = async (recipient, amount) => {\n  const raw = await makeMintTransaction(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [\n    [recipient, types.Address],\n    [amount, types.UFix64],\n  ];\n\n  return sendTransaction({ code, args });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { config } from \"@onflow/config\";\nimport { withPrefix } from \"./address\";\nimport { hexContract } from \"./deploy-code\";\nimport registry from \"./generated\";\n\nexport const initManager = async () => {\n  const code = await registry.transactions.initManagerTemplate();\n  const contractCode = await registry.contracts.FlowManagerTemplate();\n  const hexedContract = hexContract(contractCode);\n  const args = [[hexedContract, t.String]];\n\n  await sendTransaction({\n    code,\n    args,\n  });\n};\n\nexport const getServiceAddress = async () => {\n  return withPrefix(await config().get(\"SERVICE_ADDRESS\"));\n};\n\nexport const getManagerAddress = async () => {\n  const serviceAddress = await getServiceAddress();\n\n  const addressMap = {\n    FlowManager: serviceAddress,\n  };\n\n  const code = await registry.scripts.checkManagerTemplate(addressMap);\n\n  try {\n    await executeScript({\n      code,\n    });\n  } catch (e) {\n    await initManager();\n  }\n\n  return getServiceAddress();\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\n\nimport { pubFlowKey } from \"./crypto\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { getManagerAddress } from \"./manager\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of account specified by name. If account with that name doesn't exist it will be created\n * and assigned provided name as alias\n * @param {string} accountName - name of the account\n * @returns {Promise<string|*>}\n */\nexport const getAccountAddress = async (accountName) => {\n  const name = accountName || `deployment-account-${(Math.random() * Math.pow(10, 8)).toFixed(0)}`;\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let accountAddress;\n  try {\n    const code = await registry.scripts.getAccountAddressTemplate(addressMap);\n\n    const args = [\n      [name, t.String],\n      [managerAddress, t.Address],\n    ];\n    accountAddress = await executeScript({\n      code,\n      args,\n    });\n  } catch (e) {\n    console.error(\"failed to get account address:\", e);\n  }\n\n  if (accountAddress === null) {\n    try {\n      const code = await registry.transactions.createAccountTemplate(addressMap);\n      const publicKey = await pubFlowKey();\n      const args = [\n        [name, publicKey, t.String],\n        [managerAddress, t.Address],\n      ];\n      const { events } = await sendTransaction({\n        code,\n        args,\n      });\n      const event = events.find((event) => event.type.includes(\"AccountAdded\"));\n      accountAddress = event.data.address;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  return accountAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { unwrap, sendTransaction } from \"./interaction\";\nimport { getServiceAddress } from \"./manager\";\nimport { getContractCode } from \"./file\";\nimport { getAccountAddress } from \"./account\";\n\nimport txRegistry from \"./generated/transactions\";\nconst { updateContractTemplate, deployContractTemplate } = txRegistry;\n\nexport const hexContract = (contract) => Buffer.from(contract, \"utf8\").toString(\"hex\");\n\n/**\n * Deploys a contract by name to specified account\n * Returns transaction result.\n * @param {string} props.to - If no address is supplied, the contract will be deployed to the emulator service account.\n * @param {string} props.name  - The name of the contract to look for. This should match a .cdc file located at the specified `basePath`.\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced.\n * @returns {Promise<any>}\n */\nexport const deployContractByName = async (props) => {\n  const { to, name, addressMap, args, update = false } = props;\n\n  const resolvedAddress = to || (await getAccountAddress());\n  const contractCode = await getContractCode({ name, addressMap });\n\n  return deployContract({\n    to: resolvedAddress,\n    code: contractCode,\n    name,\n    args,\n    update,\n  });\n};\n\n/**\n * Deploys contract as Cadence code to specified account\n * Returns transaction result.\n * @param {string} props.code - Cadence code for contract to be deployed\n * @param {string} props.to - If no address is supplied, the contract\n * will be deployed to the emulator service account\n * @param {string} props.name  - The name of the contract to look for. This should match\n * a .cdc file located at the specified `basePath`\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced\n */\nexport const deployContract = async (props) => {\n  const { to, code: contractCode, name, args, update } = props;\n\n  // TODO: extract name from contract code\n  const containerAddress = to || (await getAccountAddress());\n  const managerAddress = await getServiceAddress();\n  const hexedCode = hexContract(contractCode);\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let code = update\n    ? await updateContractTemplate(addressMap)\n    : await deployContractTemplate(addressMap);\n\n  let deployArgs = [\n    [name, hexedCode, t.String],\n    [managerAddress, t.Address],\n  ];\n\n  // We don't really care about the names of the arguments, but we need unique one for each one of them\n  const argLetter = \"abcdefghijklmnopqrstuvwxyz\";\n  if (args) {\n    deployArgs = deployArgs.concat(args);\n\n    let i = 0;\n    const argsList = [];\n    const argsWithTypes = args.reduce((acc, arg) => {\n      const unwrapped = unwrap(arg, (value, type) => {\n        const argName = argLetter[i];\n        i += 1;\n        argsList.push(argName);\n        return `${argName}:${type.label}`;\n      });\n      acc = [...acc, ...unwrapped];\n      return acc;\n    }, []);\n\n    code = code.replace(\"##ARGS-WITH-TYPES##\", `, ${argsWithTypes}`);\n    code = code.replace(\"##ARGS-LIST##\", argsList);\n  } else {\n    code = code.replace(\"##ARGS-WITH-TYPES##\", ``);\n    code = code.replace(\"##ARGS-LIST##\", \"\");\n  }\n\n  const signers = [containerAddress];\n\n  return sendTransaction({\n    code,\n    args: deployArgs,\n    signers,\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { getManagerAddress } from \"./manager\";\nimport { executeScript } from \"./interaction\";\nimport { defaultsByName } from \"./file\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of the account where contract specified by name is currently deployed\n * @param {string} name - name of the account to look for\n * @param {boolean} [useDefaults=false] - whether we shall look into default addressed first\n * @returns {Promise<string>}\n */\nexport const getContractAddress = async (name, useDefaults = false) => {\n  // TODO: Maybe try to automatically deploy contract? 🤔\n\n  if (useDefaults) {\n    const defaultContract = defaultsByName[name];\n    if (defaultContract !== undefined) {\n      return defaultContract;\n    }\n  }\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let contractAddress;\n  try {\n    const code = await registry.scripts.getContractAddressTemplate(addressMap);\n    const args = [\n      [name, t.String],\n      [managerAddress, t.Address],\n    ];\n    contractAddress = await executeScript({\n      code,\n      args,\n    });\n  } catch (e) {\n    console.error(\"failed to get account address:\", e);\n  }\n\n  return contractAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { expect } = global;\n\n/**\n * Return Promise from passed interaction\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*>\n * */\nexport const promise = async (ix) => {\n  if (typeof ix === \"function\") {\n    return await ix();\n  }\n  return await ix;\n};\n\n/**\n * Ensure transaction did not throw and sealed.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - transaction result\n * */\nexport const shallPass = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).resolves.not.toBe(null);\n  await expect(wrappedInteraction).resolves.not.toThrow();\n\n  wrappedInteraction.then(({ status, errorMessage }) => {\n    expect(status).toBe(4);\n    expect(errorMessage).toBe(\"\");\n  });\n\n  return wrappedInteraction;\n};\n\n/**\n * Ensure interaction did not throw and return result of it\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - result of interaction\n * */\nexport const shallResolve = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).resolves.not.toThrow();\n\n  return wrappedInteraction;\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallRevert = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).rejects.not.toBe(null);\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallThrow = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).rejects.not.toBe(null);\n  await expect(wrappedInteraction).rejects.toThrow();\n};","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { spawn } = require(\"child_process\");\n\nconst DEFAULT_HTTP_PORT = 8080;\nconst DEFAULT_GRPC_PORT = 3569;\n\n/** Class representing emulator */\nclass Emulator {\n  /**\n   * Create an emulator.\n   */\n  constructor() {\n    this.initialized = false;\n    this.logging = true;\n  }\n\n  /**\n   * Set logging flag.\n   * @param {boolean} logging - whether logs shall be printed\n   */\n  setLogging(logging) {\n    this.logging = logging;\n  }\n\n  /**\n   * Log message with a specific type.\n   * @param {*} message - message to put into log output\n   * @param {\"log\"|\"error\"} type - type of the message to output\n   */\n  log(message, type = \"log\") {\n    this.logging && console[type](message);\n  }\n\n  /**\n   * Start emulator.\n   * @param {number} port - port to use for accessApi\n   * @param {boolean} logging - whether logs shall be printed\n   * @returns Promise<*>\n   */\n  async start(port = DEFAULT_HTTP_PORT, logging = false) {\n    const offset = port - DEFAULT_HTTP_PORT;\n    let grpc = DEFAULT_GRPC_PORT + offset;\n\n    this.logging = logging;\n    this.process = spawn(\"flow\", [\"emulator\", \"-v\", \"--http-port\", port, \"--port\", grpc]);\n\n    return new Promise((resolve, reject) => {\n      this.process.stdout.on(\"data\", (data) => {\n        this.log(`LOG: ${data}`);\n        if (data.includes(\"Starting HTTP server\")) {\n          this.log(\"EMULATOR IS UP! Listening for events!\");\n          this.initialized = true;\n          resolve(true);\n        }\n      });\n\n      this.process.stderr.on(\"data\", (data) => {\n        this.log(`stderr: ${data}`, \"error\");\n        this.initialized = false;\n        reject();\n      });\n\n      this.process.on(\"close\", (code) => {\n        this.log(`emulator exited with code ${code}`);\n        this.initialized = false;\n        resolve(true)\n      });\n    });\n  }\n\n  /**\n   * Stop emulator.\n   * @returns Promise<*>\n   */\n  async stop() {\n    // eslint-disable-next-line no-undef\n    return new Promise((resolve) => {\n      this.process.kill();\n      setTimeout(() => {\n        this.initialized = false;\n        resolve(true);\n      }, 0);\n    });\n  }\n}\n\n/** Singleton instance */\nexport default new Emulator();\n"],"names":["get","scope","path","fallback","split","length","head","rest","_error","set","key","env","conf","config","put","flowConfig","getConfigValue","async","init","basePath","port","process","PK","SERVICE_ADDRESS","BASE_PATH","REGEXP_IMPORT","getPairs","line","map","item","replace","filter","collect","acc","contract","address","extractImports","code","includes","reduce","replaceImportAddresses","addressMap","byName","match","imp","_","Function","defaultsByName","FlowToken","FungibleToken","FlowFees","FlowStorageFees","defaultsByAddress","0xe5a8b7f23e8b548f","0xf8d6e0586b0a20c7","0x0ae53cb6e3f42a79","0xee82856bf20e2aa6","getPath","name","type","configBase","resolve","getTemplate","file","byAddress","rawCode","fs","readFileSync","readFile","getContractCode","getTransactionCode","getScriptCode","sansPrefix","withPrefix","ec","EC","signWithKey","privateKey","msgHex","sig","keyFromPrivate","Buffer","from","sign","sha","SHA3","update","digest","hashMsgHex","r","toArrayLike","s","concat","toString","authorization","addr","keyId","account","serviceAddress","pkey","tempId","fcl","signingFunction","signature","data","message","unwrap","arr","convert","slice","value","mapArgs","args","arg","extractParameters","ixType","ixCode","ixName","ixSigners","ixArgs","ixAddressMap","params","props","signers","Error","getIxTemplate","sendTransaction","extractor","serviceAuth","ix","transaction","payer","proposer","limit","auths","push","authorizations","response","send","tx","onceExecuted","executeScript","script","decode","CODE","createAccountTemplate","fullMap","getEnvironment","reportMissingImports","createAccount","reportMissing","deployContractTemplate","deployContract","initManagerTemplate","initManager","mintTokensTemplate","mintTokens","registerContractTemplate","registerContract","scratchTemplate","scratch","updateContractTemplate","updateContract","transactions","FlowTokenMap","ExampleToken","lowerFirst","toLowerCase","getFlowBalance","raw","registry","makeGetBalance","types","Address","mintFlow","recipient","amount","makeMintTransaction","UFix64","getServiceAddress","getManagerAddress","FlowManager","e","contractCode","hexContract","t","String","getAccountAddress","accountName","Math","random","pow","toFixed","managerAddress","accountAddress","console","error","publicKey","getPublic","rlp","encode","pubFlowKey","events","find","event","txRegistry","deployContractByName","to","resolvedAddress","containerAddress","hexedCode","deployArgs","i","argsList","argsWithTypes","argName","label","getContractAddress","useDefaults","defaultContract","undefined","contractAddress","expect","global","promise","shallPass","wrappedInteraction","resolves","not","toBe","toThrow","then","status","errorMessage","shallResolve","shallRevert","rejects","shallThrow","spawn","require","constructor","this","initialized","logging","setLogging","log","[object Object]","grpc","Promise","reject","stdout","on","stderr","kill","setTimeout"],"mappings":"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"}